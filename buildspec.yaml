version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.8
    commands:
      - echo "Installing Terraform and dependencies"
      - apt-get update || { echo "Failed to update APT repositories"; exit 1; }
      - apt-get install -y gnupg || { echo "Failed to install gnupg"; exit 1; }
      - curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor - > /usr/share/keyrings/hashicorp-archive-keyring.gpg || { echo "Failed to download HashiCorp GPG key"; exit 1; }
      - echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list > /dev/null || { echo "Failed to add HashiCorp APT repository"; exit 1; }
      - apt-get update || { echo "Failed to update APT repositories after adding HashiCorp repository"; exit 1; }
      - apt-get install terraform -y || { echo "Failed to install Terraform"; exit 1; }

  pre_build:
    commands:
      - echo "Executing pre-build steps"

  build:
    commands:
      - echo "Running Terraform commands"
      - terraform --version  # Check Terraform version for verification
      - terraform init       # Initialize Terraform (if needed)
      - terraform validate s3.tf  # Validate the Terraform configuration
      - terraform plan -out=tfplan -input=false s3.tf  # Create an execution plan
      - terraform apply -auto-approve tfplan  # Apply changes

  post_build:
    commands:
      - echo "Executing post-build steps"

artifacts:
  files:
    - '**/*'

cache:
  paths:
    - '/root/.cache/**/*'
